name: Store Docker Image in Amazon ECR

on:
  push:
    branches: ["main"]

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: noteflix
  CONTAINER_NAME: noteflixV2

permissions:
  contents: read

jobs:
  store:
    name: Store
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create .env file from secrets
        run: |
          echo "${{ secrets.ADMIN_SDK_JSON }}" > ./adminSDK.json
          echo "NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}" >> ./env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> ./env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> ./env
          echo "PRO_GITHUB_ID=${{ secrets.PRO_GITHUB_ID }}" >> ./env
          echo "PRO_GITHUB_SECRET=${{ secrets.PRO_GITHUB_SECRET }}" >> ./env
          echo "NEXT_PUBLIC_FIREBASE_API_KEY=${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}" >> ./env
          echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> ./env
          echo "NEXT_PUBLIC_ALGOLIA_APP_ID=${{ secrets.NEXT_PUBLIC_ALGOLIA_APP_ID }}" >> ./env
          echo "NEXT_PUBLIC_ALGOLIA_API_KEY=${{ secrets.NEXT_PUBLIC_ALGOLIA_API_KEY }}" >> ./env
          echo "GOOGLE_APPLICATION_CREDENTIALS=./adminSDK.json" >> ./env
          ls -al

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Print Docker Login Command
        run: |
          echo "Docker login command: ${{ steps.login-ecr.outputs.login-command }}"

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --no-cache -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
