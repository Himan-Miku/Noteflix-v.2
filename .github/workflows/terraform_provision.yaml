name: Terraform Provisioning & Conf Management with Ansible

on:
  push:
    branches: ["main"]

env:
  AWS_REGION: ap-south-1
  SSH_PRIVATE_KEY: ${{ secrets.SSH_ID_RSA }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: "ap-south-1"

jobs:
  provision_deploy:
    name: Terraform Provision & Deploy Application
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: terraform/remote-provisioning

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/ansible-ssh.pem
          chmod 600 ~/.ssh/ansible-ssh.pem

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.8.2
          terraform_wrapper: false

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve

      - name: Get EC2 Public DNS
        id: get_ec2_public_dns
        run: |
          terraform output ec2_public_dns > dnsfile.txt
          ec2_public_dns=$(<dnsfile.txt)
          ec2_public_dns="${ec2_public_dns//\"}"
          echo "EC2_PUBLIC_DNS<<EOF" >> $GITHUB_ENV
          echo "$ec2_public_dns" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "::set-output name=EC2_PUBLIC_DNS::$ec2_public_dns"

      - name: Get EC2 Public IP
        id: get_ec2_public_ip
        run: |
          terraform output ec2_public_ip > ipfile.txt
          ec2_public_ip=$(<ipfile.txt)
          ec2_public_ip="${ec2_public_ip//\"}"
          echo "EC2_PUBLIC_IP<<EOF" >> $GITHUB_ENV
          echo "$ec2_public_ip" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "::set-output name=EC2_PUBLIC_IP::$ec2_public_ip"

      - name: Install Ansible
        run: sudo apt-get update && sudo apt-get install -y ansible

      - name: Install boto3
        run: sudo apt-get install -y python3-pip && pip3 install boto3

      - name: Configure AWS credentials for Ansible
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials

      - name: Deploy Application
        working-directory: ansible
        run: |
          touch ansible.cfg
          echo "[defaults]" > ansible.cfg
          echo "host_key_checking = False" >> ansible.cfg
          cat ansible.cfg
          echo "all:" > inventory.yaml
          echo "  hosts:" >> inventory.yaml
          echo "    ${EC2_PUBLIC_DNS}:" >> inventory.yaml
          echo "      ansible_host: ${EC2_PUBLIC_IP}" >> inventory.yaml
          cat inventory.yaml
          ansible-playbook -i inventory.yaml --private-key=~/.ssh/ansible-ssh.pem deploy_container.yaml