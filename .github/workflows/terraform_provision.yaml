name: Terraform Provisioning & Conf Management with Ansible

on:
  push:
    branches: ["main"]

env:
  AWS_REGION: ap-south-1

jobs:
  provision_deploy:
    name: Terraform Provision & Deploy Application
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: terraform/remote-provisioning

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.8.2

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve

      - name: Get private SSH key output
        run: |
          terraform output private_key > $HOME/.ssh/private_key.pem
          chmod 600 $HOME/.ssh/private_key.pem

      - name: Get public IPv4 dns output
        run: |
          PUBLIC_DNS=$(terraform output -raw public_dns)
          export PUBLIC_DNS=$PUBLIC_DNS

      - name: Generate SSH key pair for Ansible-EC2 communication
        id: ssh_key
        run: |
          ssh-keygen -t rsa -b 4096 -N '' -f "$HOME/.ssh/deploy_key"
          chmod 600 $HOME/.ssh/deploy_key
          chmod 600 $HOME/.ssh/deploy_key.pub
          echo "::set-output name=public_key::$(cat $HOME/.ssh/deploy_key.pub)"
          chmod 644 /home/runner/work/Noteflix-v.2/Noteflix-v.2/ansible/inventory.py

      - name: Add public key to EC2 instance
        run: |
          PUBLIC_KEY="${{ steps.ssh_key.outputs.public_key }}"
          ssh -i "$HOME/.ssh/private_key.pem" ec2-user@$PUBLIC_DNS "echo '$PUBLIC_KEY' >> ~/.ssh/authorized_keys"

      - name: Set EC2 IP as GitHub Actions Environment Variable
        run: export "EC2_IP=$(terraform output -raw ec2_public_ip)"

      - name: Install Ansible
        run: sudo apt-get update && sudo apt-get install -y ansible

      - name: Deploy Application
        run: ansible-playbook -i ./ansible/inventory.py ./ansible/deploy_container.yaml -e "ansible_ssh_private_key_file=$HOME/.ssh/deploy_key" -e "ansible_ssh_common_args='-o StrictHostKeyChecking=no'"